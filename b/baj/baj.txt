自明なケースを除く
(
0以外で最初に現れるのが1なら簡単
先頭が-1でなくて、最初に現れる非零が-1なら無理
)

1以上が存在しないような解の中での最小値もすぐに求まる。

値の絶対値が1を超えるような操作は必要ない。
これは、添え字の大きい方から順に1を超えないような操作に(損をせずに)置き換えていけるから。

あとは、-1 | 0 | 1
という境界を考えてあげる。
1の境界の左端は元から1であると考えていい。なぜなら、
元が1でなければ、その元が最終的に1になる瞬間を考えると、その左の元も1であるはず。
そいつを1以上に保ったままにしても損しないことがわかる。
以上を繰り返すと、左端が1の元になる。
この1の場所を全探索するイメージ。

1の区画内での操作回数の下界を考えれば、1の区間においては
1-A[i]の総和だけコストがかかる。

同様に、-1の区画もA[i]+1の総和だけコストがかかる。


0の区画はどうだろうか？実は、0の区画が複雑な構成になっていれば、それらのほとんどを-1の区画に押し込めてもいいことが示せる。
具体的にいうと、0の区画は、左端の元以外は元から0だと仮定しても問題ない。左端の元は、0であるか、1であるか、どちらかのみを考えればいい。
1である場合は、-1の区画の元をつかって、コスト1で1減らす。

ここまで考察すると、見なければ行けない境界はO(N)である。
適当にすべて見る。